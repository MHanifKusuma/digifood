// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "final-project-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// FindUserByLoginInfo provides a mock function with given fields: userLogin
func (_m *AuthRepository) FindUserByLoginInfo(userLogin model.UserLogin) (*model.User, error) {
	ret := _m.Called(userLogin)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(model.UserLogin) *model.User); ok {
		r0 = rf(userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserLogin) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: newUser
func (_m *AuthRepository) RegisterUser(newUser model.User) (string, error) {
	ret := _m.Called(newUser)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.User) string); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepository(t mockConstructorTestingTNewAuthRepository) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
