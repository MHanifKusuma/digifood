// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "final-project-backend/model"

	mock "github.com/stretchr/testify/mock"
)

// CategoryService is an autogenerated mock type for the CategoryService type
type CategoryService struct {
	mock.Mock
}

// DeleteCategory provides a mock function with given fields: category
func (_m *CategoryService) DeleteCategory(category model.Category) (string, int, error) {
	ret := _m.Called(category)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.Category) string); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.Category) int); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.Category) error); ok {
		r2 = rf(category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllCategory provides a mock function with given fields:
func (_m *CategoryService) GetAllCategory() ([]*model.Category, int, error) {
	ret := _m.Called()

	var r0 []*model.Category
	if rf, ok := ret.Get(0).(func() []*model.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Category)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCategoryById provides a mock function with given fields: id
func (_m *CategoryService) GetCategoryById(id int) (*model.Category, int, error) {
	ret := _m.Called(id)

	var r0 *model.Category
	if rf, ok := ret.Get(0).(func(int) *model.Category); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Category)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCategory provides a mock function with given fields: category
func (_m *CategoryService) UpdateCategory(category model.Category) (string, int, error) {
	ret := _m.Called(category)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.Category) string); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(model.Category) int); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(model.Category) error); ok {
		r2 = rf(category)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewCategoryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryService creates a new instance of CategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryService(t mockConstructorTestingTNewCategoryService) *CategoryService {
	mock := &CategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
